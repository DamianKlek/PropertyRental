// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PropertyRental.Persistance;

namespace PropertyRental.Persistance.Migrations
{
    [DbContext(typeof(PropertyDbContext))]
    [Migration("20210723234203_changeNameOfPropertyAddressTableToAddress")]
    partial class changeNameOfPropertyAddressTableToAddress
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.7")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("PropertyRental.Domain.Entities.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Inactivated")
                        .HasColumnType("datetime2");

                    b.Property<string>("InactivatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PropertyId")
                        .HasColumnType("int");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PropertyId")
                        .IsUnique();

                    b.ToTable("Addresses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Created = new DateTime(2021, 7, 24, 1, 42, 3, 328, DateTimeKind.Local).AddTicks(981),
                            PropertyId = 1,
                            StatusId = 1
                        },
                        new
                        {
                            Id = 2,
                            Created = new DateTime(2021, 7, 24, 1, 42, 3, 328, DateTimeKind.Local).AddTicks(1316),
                            PropertyId = 2,
                            StatusId = 1
                        });
                });

            modelBuilder.Entity("PropertyRental.Domain.Entities.Availability", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AvailabilityStatus")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Day")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Inactivated")
                        .HasColumnType("datetime2");

                    b.Property<string>("InactivatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PropertyRentId")
                        .HasColumnType("int");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PropertyRentId");

                    b.ToTable("Availabilities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AvailabilityStatus = 1,
                            Created = new DateTime(2021, 7, 24, 1, 42, 3, 328, DateTimeKind.Local).AddTicks(7637),
                            Day = new DateTime(2021, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PropertyRentId = 1,
                            StatusId = 1
                        },
                        new
                        {
                            Id = 2,
                            AvailabilityStatus = 1,
                            Created = new DateTime(2021, 7, 24, 1, 42, 3, 328, DateTimeKind.Local).AddTicks(8375),
                            Day = new DateTime(2021, 9, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PropertyRentId = 1,
                            StatusId = 1
                        },
                        new
                        {
                            Id = 3,
                            AvailabilityStatus = 1,
                            Created = new DateTime(2021, 7, 24, 1, 42, 3, 328, DateTimeKind.Local).AddTicks(8387),
                            Day = new DateTime(2021, 9, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PropertyRentId = 1,
                            StatusId = 1
                        },
                        new
                        {
                            Id = 4,
                            AvailabilityStatus = 1,
                            Created = new DateTime(2021, 7, 24, 1, 42, 3, 328, DateTimeKind.Local).AddTicks(8390),
                            Day = new DateTime(2021, 9, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PropertyRentId = 1,
                            StatusId = 1
                        },
                        new
                        {
                            Id = 5,
                            AvailabilityStatus = 1,
                            Created = new DateTime(2021, 7, 24, 1, 42, 3, 328, DateTimeKind.Local).AddTicks(8392),
                            Day = new DateTime(2021, 8, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PropertyRentId = 2,
                            StatusId = 1
                        },
                        new
                        {
                            Id = 6,
                            AvailabilityStatus = 0,
                            Created = new DateTime(2021, 7, 24, 1, 42, 3, 328, DateTimeKind.Local).AddTicks(8395),
                            Day = new DateTime(2021, 8, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PropertyRentId = 2,
                            StatusId = 1
                        },
                        new
                        {
                            Id = 7,
                            AvailabilityStatus = 0,
                            Created = new DateTime(2021, 7, 24, 1, 42, 3, 328, DateTimeKind.Local).AddTicks(8397),
                            Day = new DateTime(2021, 8, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PropertyRentId = 2,
                            StatusId = 1
                        },
                        new
                        {
                            Id = 8,
                            AvailabilityStatus = 1,
                            Created = new DateTime(2021, 7, 24, 1, 42, 3, 328, DateTimeKind.Local).AddTicks(8399),
                            Day = new DateTime(2021, 8, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PropertyRentId = 2,
                            StatusId = 1
                        },
                        new
                        {
                            Id = 9,
                            AvailabilityStatus = 1,
                            Created = new DateTime(2021, 7, 24, 1, 42, 3, 328, DateTimeKind.Local).AddTicks(8402),
                            Day = new DateTime(2021, 8, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PropertyRentId = 2,
                            StatusId = 1
                        });
                });

            modelBuilder.Entity("PropertyRental.Domain.Entities.Contract", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndRentDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Inactivated")
                        .HasColumnType("datetime2");

                    b.Property<string>("InactivatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PropertyRentId")
                        .HasColumnType("int");

                    b.Property<decimal>("RentCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("StartRentDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<int>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PropertyRentId");

                    b.HasIndex("TenantId");

                    b.ToTable("Contracts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Created = new DateTime(2021, 7, 24, 1, 42, 3, 329, DateTimeKind.Local).AddTicks(414),
                            EndRentDate = new DateTime(2021, 8, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PropertyRentId = 2,
                            RentCost = 98m,
                            StartRentDate = new DateTime(2021, 8, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StatusId = 1,
                            TenantId = 3
                        });
                });

            modelBuilder.Entity("PropertyRental.Domain.Entities.Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Inactivated")
                        .HasColumnType("datetime2");

                    b.Property<string>("InactivatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<int>("PropertyId")
                        .HasColumnType("int");

                    b.Property<string>("SourcePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PropertyId");

                    b.ToTable("Images");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Created = new DateTime(2021, 7, 24, 1, 42, 3, 329, DateTimeKind.Local).AddTicks(8304),
                            Name = "CozyMansionPrimary",
                            PropertyId = 1,
                            SourcePath = "TBA",
                            StatusId = 1
                        },
                        new
                        {
                            Id = 2,
                            Created = new DateTime(2021, 7, 24, 1, 42, 3, 329, DateTimeKind.Local).AddTicks(9104),
                            Name = "CozyMansionOutside",
                            PropertyId = 1,
                            SourcePath = "TBA",
                            StatusId = 1
                        },
                        new
                        {
                            Id = 3,
                            Created = new DateTime(2021, 7, 24, 1, 42, 3, 329, DateTimeKind.Local).AddTicks(9114),
                            Name = "CozyMansionInside",
                            PropertyId = 1,
                            SourcePath = "TBA",
                            StatusId = 1
                        },
                        new
                        {
                            Id = 4,
                            Created = new DateTime(2021, 7, 24, 1, 42, 3, 329, DateTimeKind.Local).AddTicks(9117),
                            Name = "StudentFlatPrimary",
                            PropertyId = 2,
                            SourcePath = "TBA",
                            StatusId = 1
                        },
                        new
                        {
                            Id = 5,
                            Created = new DateTime(2021, 7, 24, 1, 42, 3, 329, DateTimeKind.Local).AddTicks(9119),
                            Name = "StudentFlatLivingroom",
                            PropertyId = 2,
                            SourcePath = "TBA",
                            StatusId = 1
                        });
                });

            modelBuilder.Entity("PropertyRental.Domain.Entities.Property", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Inactivated")
                        .HasColumnType("datetime2");

                    b.Property<string>("InactivatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Properties");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Created = new DateTime(2021, 7, 24, 1, 42, 3, 327, DateTimeKind.Local).AddTicks(3138),
                            Description = "Cozy masion situated outside the town",
                            Name = "Cozy masion",
                            StatusId = 1
                        },
                        new
                        {
                            Id = 2,
                            Created = new DateTime(2021, 7, 24, 1, 42, 3, 327, DateTimeKind.Local).AddTicks(3766),
                            Description = "Flat placed in city centre",
                            Name = "Student flat",
                            StatusId = 1
                        });
                });

            modelBuilder.Entity("PropertyRental.Domain.Entities.PropertyRent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("DayCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("Inactivated")
                        .HasColumnType("datetime2");

                    b.Property<string>("InactivatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PropertyId")
                        .HasColumnType("int");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PropertyId")
                        .IsUnique();

                    b.ToTable("PropertyRents");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Created = new DateTime(2021, 7, 24, 1, 42, 3, 329, DateTimeKind.Local).AddTicks(3300),
                            DayCost = 100m,
                            PropertyId = 1,
                            StatusId = 1
                        },
                        new
                        {
                            Id = 2,
                            Created = new DateTime(2021, 7, 24, 1, 42, 3, 329, DateTimeKind.Local).AddTicks(3862),
                            DayCost = 49m,
                            PropertyId = 2,
                            StatusId = 1
                        });
                });

            modelBuilder.Entity("PropertyRental.Domain.Entities.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Inactivated")
                        .HasColumnType("datetime2");

                    b.Property<string>("InactivatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Tags");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Created = new DateTime(2021, 7, 24, 1, 42, 3, 329, DateTimeKind.Local).AddTicks(5785),
                            Name = "Mansion",
                            StatusId = 1
                        },
                        new
                        {
                            Id = 2,
                            Created = new DateTime(2021, 7, 24, 1, 42, 3, 329, DateTimeKind.Local).AddTicks(6050),
                            Name = "Flat",
                            StatusId = 1
                        },
                        new
                        {
                            Id = 3,
                            Created = new DateTime(2021, 7, 24, 1, 42, 3, 329, DateTimeKind.Local).AddTicks(6058),
                            Name = "House",
                            StatusId = 1
                        },
                        new
                        {
                            Id = 4,
                            Created = new DateTime(2021, 7, 24, 1, 42, 3, 329, DateTimeKind.Local).AddTicks(6061),
                            Name = "High standard",
                            StatusId = 1
                        });
                });

            modelBuilder.Entity("PropertyRental.Domain.Entities.Tenant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Inactivated")
                        .HasColumnType("datetime2");

                    b.Property<string>("InactivatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Tenants");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Created = new DateTime(2021, 7, 24, 1, 42, 3, 323, DateTimeKind.Local).AddTicks(5685),
                            StatusId = 1
                        },
                        new
                        {
                            Id = 2,
                            Created = new DateTime(2021, 7, 24, 1, 42, 3, 325, DateTimeKind.Local).AddTicks(8209),
                            StatusId = 1
                        },
                        new
                        {
                            Id = 3,
                            Created = new DateTime(2021, 7, 24, 1, 42, 3, 325, DateTimeKind.Local).AddTicks(8243),
                            StatusId = 1
                        });
                });

            modelBuilder.Entity("PropertyTags", b =>
                {
                    b.Property<int>("PropertyId")
                        .HasColumnType("int");

                    b.Property<int>("TagId")
                        .HasColumnType("int");

                    b.HasKey("PropertyId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("PropertyTags");

                    b.HasData(
                        new
                        {
                            PropertyId = 1,
                            TagId = 1
                        },
                        new
                        {
                            PropertyId = 1,
                            TagId = 3
                        },
                        new
                        {
                            PropertyId = 1,
                            TagId = 4
                        },
                        new
                        {
                            PropertyId = 2,
                            TagId = 2
                        });
                });

            modelBuilder.Entity("PropertyRental.Domain.Entities.Address", b =>
                {
                    b.HasOne("PropertyRental.Domain.Entities.Property", "Property")
                        .WithOne("PropertyAddress")
                        .HasForeignKey("PropertyRental.Domain.Entities.Address", "PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("PropertyRental.Domain.ValueObjects.AddressDetail", "AddressDetail", b1 =>
                        {
                            b1.Property<int>("AddressId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<int>("BuildingNumber")
                                .HasColumnType("int")
                                .HasColumnName("BuildingNumber");

                            b1.Property<string>("CityName")
                                .IsRequired()
                                .HasMaxLength(70)
                                .HasColumnType("nvarchar(70)")
                                .HasColumnName("CityName");

                            b1.Property<string>("CountryName")
                                .IsRequired()
                                .HasMaxLength(70)
                                .HasColumnType("nvarchar(70)")
                                .HasColumnName("CountryName");

                            b1.Property<int?>("FlatNumber")
                                .HasColumnType("int")
                                .HasColumnName("FlatNumber");

                            b1.Property<string>("StreetName")
                                .IsRequired()
                                .HasMaxLength(70)
                                .HasColumnType("nvarchar(70)")
                                .HasColumnName("StreetName");

                            b1.Property<string>("ZipCode")
                                .IsRequired()
                                .HasMaxLength(20)
                                .HasColumnType("nvarchar(20)")
                                .HasColumnName("ZipCode");

                            b1.HasKey("AddressId");

                            b1.ToTable("Addresses");

                            b1.WithOwner()
                                .HasForeignKey("AddressId");

                            b1.HasData(
                                new
                                {
                                    AddressId = 1,
                                    BuildingNumber = 34,
                                    CityName = "Tennessee",
                                    CountryName = "United States",
                                    StreetName = "Willow Grove Hwy",
                                    ZipCode = "38541"
                                },
                                new
                                {
                                    AddressId = 2,
                                    BuildingNumber = 147,
                                    CityName = "California",
                                    CountryName = "United States",
                                    StreetName = "Linwood avenue",
                                    ZipCode = "90017"
                                });
                        });

                    b.Navigation("AddressDetail");

                    b.Navigation("Property");
                });

            modelBuilder.Entity("PropertyRental.Domain.Entities.Availability", b =>
                {
                    b.HasOne("PropertyRental.Domain.Entities.PropertyRent", "PropertyRent")
                        .WithMany("Availabilities")
                        .HasForeignKey("PropertyRentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PropertyRent");
                });

            modelBuilder.Entity("PropertyRental.Domain.Entities.Contract", b =>
                {
                    b.HasOne("PropertyRental.Domain.Entities.PropertyRent", "PropertyRent")
                        .WithMany("Contracts")
                        .HasForeignKey("PropertyRentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PropertyRental.Domain.Entities.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PropertyRent");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("PropertyRental.Domain.Entities.Image", b =>
                {
                    b.HasOne("PropertyRental.Domain.Entities.Property", "Property")
                        .WithMany("Images")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Property");
                });

            modelBuilder.Entity("PropertyRental.Domain.Entities.PropertyRent", b =>
                {
                    b.HasOne("PropertyRental.Domain.Entities.Property", "Property")
                        .WithOne("PropertyRent")
                        .HasForeignKey("PropertyRental.Domain.Entities.PropertyRent", "PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Property");
                });

            modelBuilder.Entity("PropertyRental.Domain.Entities.Tenant", b =>
                {
                    b.OwnsOne("PropertyRental.Domain.ValueObjects.Email", "Email", b1 =>
                        {
                            b1.Property<int>("TenantId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("DomainName")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("EmailDomainName");

                            b1.Property<string>("UserName")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("EmailUserName");

                            b1.HasKey("TenantId");

                            b1.ToTable("Tenants");

                            b1.WithOwner()
                                .HasForeignKey("TenantId");

                            b1.HasData(
                                new
                                {
                                    TenantId = 1,
                                    DomainName = "gmail.com",
                                    UserName = "Mikey"
                                },
                                new
                                {
                                    TenantId = 2,
                                    DomainName = "gmail.com",
                                    UserName = "AnnBrown"
                                },
                                new
                                {
                                    TenantId = 3,
                                    DomainName = "outlook.com",
                                    UserName = "OliverTestMail"
                                });
                        });

                    b.OwnsOne("PropertyRental.Domain.ValueObjects.PersonName", "Name", b1 =>
                        {
                            b1.Property<int>("TenantId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("FirstName");

                            b1.Property<string>("LastName")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("LastName");

                            b1.HasKey("TenantId");

                            b1.ToTable("Tenants");

                            b1.WithOwner()
                                .HasForeignKey("TenantId");

                            b1.HasData(
                                new
                                {
                                    TenantId = 1,
                                    FirstName = "Mike",
                                    LastName = "Parker"
                                },
                                new
                                {
                                    TenantId = 2,
                                    FirstName = "Ann",
                                    LastName = "Brown"
                                },
                                new
                                {
                                    TenantId = 3,
                                    FirstName = "Oliver",
                                    LastName = "Garcia"
                                });
                        });

                    b.Navigation("Email");

                    b.Navigation("Name");
                });

            modelBuilder.Entity("PropertyTags", b =>
                {
                    b.HasOne("PropertyRental.Domain.Entities.Property", null)
                        .WithMany()
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PropertyRental.Domain.Entities.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PropertyRental.Domain.Entities.Property", b =>
                {
                    b.Navigation("Images");

                    b.Navigation("PropertyAddress");

                    b.Navigation("PropertyRent");
                });

            modelBuilder.Entity("PropertyRental.Domain.Entities.PropertyRent", b =>
                {
                    b.Navigation("Availabilities");

                    b.Navigation("Contracts");
                });
#pragma warning restore 612, 618
        }
    }
}
